{
	"name": "dataflowparquet",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dl_df_Parquet_bronz",
						"type": "DatasetReference"
					},
					"name": "orders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds1_dl_df_Parquet_orders_silver",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> orders",
				"orders cast(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(ingested_by = 'Haritha',",
				"          ingested = currentUTC()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          Order_Id = ORDER_ID,",
				"          Order_Datetime = ORDER_DATETIME,",
				"          Customer_Id = CUSTOMER_ID,",
				"          Order_Status = ORDER_STATUS,",
				"          Store_Id = STORE_ID,",
				"          Ingested_By = ingested_by,",
				"          {Ingested-Date} = ingested",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Store_Id as integer,",
				"          Store_Name as string,",
				"          Web_Address as string,",
				"          Latitude as double,",
				"          Longitude as double,",
				"          Ingested_By as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}