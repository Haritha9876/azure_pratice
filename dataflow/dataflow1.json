{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds1_dl_df_Json_bronz",
						"type": "DatasetReference"
					},
					"name": "stores"
				},
				{
					"dataset": {
						"referenceName": "ds1_dl_df_Json_bronz_produts",
						"type": "DatasetReference"
					},
					"name": "products"
				},
				{
					"dataset": {
						"referenceName": "ds1_dl_df_Json_bronz_custumer",
						"type": "DatasetReference"
					},
					"name": "Customers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds1_dl_fd_Parquet_stores_silver",
						"type": "DatasetReference"
					},
					"name": "sinkjson"
				},
				{
					"dataset": {
						"referenceName": "ds1_dl_df_Parquet_products_silver",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds1_dl_df_Parquet_customers_silver",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "cast2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select2"
				},
				{
					"name": "cast3"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          STORE_ID as string,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> stores",
				"source(output(",
				"          PRODUCT_ID as string,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> products",
				"source(output(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Customers",
				"stores cast(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as decimal(10,0),",
				"          LONGITUDE as decimal(10,0)",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive({ingested by} = 'haritha',",
				"          ingested_Time = currentUTC(),",
				"          Ingested_Date = currentDate()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          Store_Id = STORE_ID,",
				"          Store_Name = STORE_NAME,",
				"          Web_Address = WEB_ADDRESS,",
				"          Latitude = LATITUDE,",
				"          Longitude = LONGITUDE,",
				"          Ingested_By = {ingested by},",
				"          Ingested_Time = ingested_Time,",
				"          Ingested_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"products cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as string",
				"     ),",
				"     errors: true) ~> cast2",
				"cast2 derive(ingested_by = 'haritha',",
				"          ingested_Time = currentUTC(),",
				"          Ingested_Date = currentDate()) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          Product_Id = PRODUCT_ID,",
				"          Product_Name = PRODUCT_NAME,",
				"          Unit_Price = UNIT_PRICE,",
				"          Ingested_By = ingested_by,",
				"          Ingested_Time = ingested_Time,",
				"          Ingested_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"Customers cast(output(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string",
				"     ),",
				"     errors: true) ~> cast3",
				"cast3 derive(ingested_by = 'Haritha',",
				"          ingested_Time = currentUTC(),",
				"          Ingested_Date = currentDate()) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          Customer_Id = CUSTOMER_ID,",
				"          Full_Name = FULL_NAME,",
				"          Email_Address = EMAIL_ADDRESS,",
				"          Ingested_By = ingested_by,",
				"          Ingested_Time = ingested_Time,",
				"          Ingested_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Store_Id as integer,",
				"          Store_Name as string,",
				"          Web_Address as string,",
				"          Latitude as double,",
				"          Longitude as double,",
				"          Ingested_By as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkjson",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Store_Id as integer,",
				"          Store_Name as string,",
				"          Web_Address as string,",
				"          Latitude as double,",
				"          Longitude as double,",
				"          Ingested_By as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Store_Id as integer,",
				"          Store_Name as string,",
				"          Web_Address as string,",
				"          Latitude as double,",
				"          Longitude as double,",
				"          Ingested_By as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}